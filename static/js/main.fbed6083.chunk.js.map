{"version":3,"sources":["logo.svg","components/Wrap/index.jsx","components/Wrap/Wrap.jsx","components/Circle/index.jsx","components/Circle/Circle.jsx","components/Interface/index.jsx","components/Interface/Interface.jsx","App.js","reportWebVitals.js","index.js"],"names":["Wrap","Circle","id","bg","position","index","defaultValue","style","color","background","left","className","Interface","useState","countCircles","setCountCircles","colors","setCollors","increase","setIncrease","decrease","setDecrease","sortedBtn","setSortedBtn","clearBtn","setClearBtn","clickSort","a","newArray","slice","lists","document","querySelectorAll","map","el","number","parseInt","textContent","i","length","j","undefined","swap","animationSwap","b","arr","itemA","itemB","transition","Promise","resolve","setTimeout","interfaceCount","increaseCount","prev","decreaseCount","useEffect","console","log","disabled","onClick","onChange","e","target","value","type","name","min","max","createColor","push","Math","round","random","generationColors","width","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fbed6083.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import Wrap from './Wrap';\r\n\r\nexport default Wrap;","const Wrap = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Wrap;","import Circle from './Circle';\r\n\r\nexport default Circle;","import './style.scss';\r\n\r\nconst Circle = ({id, bg, position,index}) => {\r\n    return (\r\n        <div id={`circle-${id}`} defaultValue={position} style={{color: `rgb(${bg[0]},${bg[1]},${bg[2]}`,background: `rgb(${bg[0]},${bg[1]},${bg[2]})`, left: `${position}px`}} className=\"circle\">\r\n            {/* {\r\n                bg[0] > bg[1] ? `${'3'+bg[0]}` : bg[1] > bg[2] ? `${'2'+bg[1]}` : `${'1'+bg[2]}`\r\n            } */}\r\n            {bg[0]+bg[1]+bg[2]}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Circle;","import Interface from './Interface';\r\n\r\nexport default Interface;","import {useState, useEffect} from 'react';\r\n\r\nimport'./style.scss';\r\n\r\nimport {\r\n    \r\n} from '../../components'\r\nimport Circle from '../Circle';\r\n\r\n\r\n\r\nconst Interface = () => {\r\n\r\n    const [countCircles, setCountCircles] = useState(10);\r\n    const [colors,setCollors] = useState([]);\r\n    const [isSorted, setIsSorted] = useState(false);\r\n    const [increase, setIncrease] = useState(false);\r\n    const [decrease, setDecrease] = useState(false);\r\n    const [sortedBtn, setSortedBtn] = useState(false);\r\n    const [clearBtn, setClearBtn] = useState(false);\r\n\r\n    \r\n\r\n    const generationColors = (number = 3) => {\r\n        let min = 1;\r\n        let max = 255;\r\n        \r\n        const createColor = () => {\r\n            let color = [];\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                color.push(Math.round(min - 0.5 + Math.random() * (max - min + 1)));\r\n            }\r\n\r\n            return color;\r\n        }\r\n\r\n        for (let i = 0; i < number; i++) {\r\n            let randomColor = Math.round(min - 0.5 + Math.random() * (max - min + 1)); //Генерация цветов от 0 до 255;\r\n            setCollors(prev => [...prev, createColor()])\r\n        }\r\n    }\r\n\r\n    const clearColors = () => {\r\n        setCollors(prev => []);\r\n        setIncrease(false);\r\n\r\n        if (countCircles > 3) {\r\n            setDecrease(false);\r\n        }\r\n    }\r\n\r\n    const clickGeneration = () => {\r\n        setIncrease(true);\r\n        setDecrease(true);\r\n        setSortedBtn(false);\r\n        generationColors(countCircles);\r\n\r\n    };\r\n\r\n    const clickSort = async () => {\r\n        setSortedBtn(true)\r\n        setClearBtn(true);\r\n        let newArray = colors.slice(0);\r\n        let lists = [...document.querySelectorAll('.circle')].map((el,index) => ({\r\n            el,\r\n            index,\r\n            number:parseInt(el.textContent, 10)\r\n        }));\r\n\r\n        for (let i = colors.length - 1; i > 0 ; i--) {\r\n            for (let j = 0; j < i; j++) {\r\n                if (lists[j + 1] !== undefined && lists[j].number > lists[j + 1].number) {\r\n                    \r\n                    setIncrease(true);\r\n                    setDecrease(true);\r\n\r\n                    let swap = newArray[j];\r\n                    newArray[j] = newArray[j + 1];\r\n                    newArray[j + 1] = swap;\r\n\r\n                    await animationSwap (j ,j + 1,lists)\r\n\r\n                    \r\n\r\n\r\n                }\r\n            }\r\n        }\r\n        lists = [...document.querySelectorAll('.circle')].map((el,index) => ({\r\n            el,\r\n            index,\r\n            number:parseInt(el.textContent, 10)\r\n        }));\r\n\r\n        setClearBtn(false);\r\n        return;\r\n    }\r\n\r\n    const animationSwap = (a, b,arr) => {\r\n        const itemA = arr[a];\r\n        const itemB = arr[b];\r\n\r\n        itemA.index = a;\r\n        itemB.index = b;\r\n\r\n        arr[a] = itemB;\r\n        arr[b] = itemA;\r\n        \r\n        itemA.el.style.left = `${itemB.index * 50}px`;\r\n        itemA.el.style.transition = `0.5s ease-in-out`;\r\n\r\n        itemB.el.style.left = `${itemA.index * 50}px`;\r\n        itemB.el.style.transition = `0.5s ease-in-out`;\r\n\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                resolve()\r\n            }, 500)\r\n        })\r\n    }\r\n\r\n    const interfaceCount =  {\r\n        increaseCount() {\r\n            setCountCircles(prev => prev + 1)\r\n        },\r\n        decreaseCount() {\r\n            setCountCircles(prev => prev - 1)\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        colors.length === 0 ? setSortedBtn(true) : setSortedBtn(false);\r\n\r\n        console.log(colors)\r\n    }, [colors])\r\n\r\n    useEffect(() => {\r\n        if (countCircles < 4) {\r\n            setDecrease(true)\r\n        }\r\n        if (countCircles > 3 ) {\r\n            setDecrease(false)\r\n        }\r\n    }, [countCircles])\r\n\r\n    return (\r\n        <section className=\"interface\">\r\n           <div className=\"interface-wrap\">\r\n                <h5>Кол-во окружностей</h5>\r\n                <div className=\"interface-input\">\r\n                    <button disabled={decrease}  onClick={interfaceCount.decreaseCount}>-</button>\r\n                    <input disabled={true} onChange={e => setCountCircles(e.target.value)} type=\"text\" value={countCircles} name=\"circles-count\" />\r\n                    <button disabled={increase} onClick={interfaceCount.increaseCount}>+</button>\r\n                </div>\r\n                <div className=\"interface-wrap-btns\">\r\n                    {colors.length !== 0 ? \r\n                        <button disabled={clearBtn} onClick={clearColors}>Очистить</button>\r\n                        : <button onClick={clickGeneration}>Генерировать</button>\r\n                    }\r\n                    \r\n                    <button disabled={sortedBtn} onClick={() => clickSort(colors)}>Отсортировать</button>\r\n                </div>\r\n                \r\n           </div>\r\n           <div className=\"circles-wrap\" style={{width: `${colors.length * 50 - 15}px`}}>\r\n               {colors ? colors.map((item,index) => \r\n                    <Circle key={index} id={index} index={index} position={index === 0 ? 0 : index * 50} bg={item} />) \r\n                : null}\r\n           </div>\r\n        </section>\r\n    );\r\n}\r\n \r\nexport default Interface;","import logo from './logo.svg';\n\nimport {\n  Wrap,\n  Interface,\n  Circle\n} from './components'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrap />\n      <Interface />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}